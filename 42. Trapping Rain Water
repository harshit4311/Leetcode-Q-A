class Solution {
    public int trap(int[] height) {
        int n = height.length;
        if(n==0)
        
        return 0;

        // Calculate prefixMax
        int[] prefixMax = new int[n];
        prefixMax[0] = height[0];
        for(int i=1; i<n; i++){
            prefixMax[i] = Math.max(prefixMax[i - 1], height[i]);
        }

        // Calculate suffixMax
        int[] suffixMax = new int[n];
        suffixMax[n-1] = height[n-1];
        for(int i=n-2; i>=0; i--){
            suffixMax[i] = Math.max(suffixMax[i + 1], height[i]);
        }

        // Calculate trapped water
        int trappedWater = 0;
        for (int i = 0; i < n; i++) {
            trappedWater += Math.max(0, Math.min(prefixMax[i], suffixMax[i]) - height[i]);
        }
        return trappedWater;
    }
}
